
Идея заключается в том, чтобы хранить только те поля, которые изменяются. Это приводит к дизайну потока отрисовки.

Мы сохраняем 32-битную битовую маску перед каждым вызовом отрисовки. Эта битовая маска сообщает, какие поля в структуре отрисовки изменились.

Код пользовательской земли отвечает за запись данных в соответствии с контрактом API потоковых данных. Для этого у нас есть класс записи потока отрисовки пользовательской земли. Он содержит одну структуру отрисовки, описывающую текущее состояние, и грязную маску. Запись потока отрисовки предоставляет функцию для установки каждого поля в структуре. Эти функции проверяют, было ли изменено значение данных. Если да, то устанавливают соответствующий грязный бит и записывают это поле в поток. После записи всех полей пользователь вызывает отрисовку, которая просто записывает грязную битовую маску перед значениями данных.

Бэкенд прост: для каждого вызова отрисовки он считывает грязную битовую маску. Затем он считывает один uint32 из потока для каждого бита и вызывает соответствующий вызов API платформы, чтобы установить эту привязку/состояние/значение. Преимущество этой конструкции в том, что бэкэнду не нужна никакая фильтрация состояния. Мы уже сделали это в коде пользовательской земли. Это удобно на платформах, где вторичные буферы команд недоступны или работают медленно (некоторые графические процессоры Qualcomm отключают оптимизацию с вторичными буферами команд). Мы по-прежнему можем генерировать поток отрисовки с использованием нескольких рабочих потоков и разгружать там затраты на фильтрацию состояния. Поток рендеринга работает максимально быстро, что является большим выигрышем, поскольку вызовы API платформы работают медленно на мобильных устройствах. Мы также экономим примерно в 3 раза пропускную способность по сравнению с полноценными 64-байтовыми структурами.
