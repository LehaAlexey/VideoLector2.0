
Последняя оптимизация, которую я хочу обсудить, — это базовый экземпляр.

Базовый экземпляр рисования использует ту же компоновку данных, что и экземпляр. Вы используете плотно упакованный массив данных рисования. На мобильных устройствах унифицированные буферы имеют ограничение на размер привязки в 16 КБ. Идея состоит в том, чтобы изменять смещение привязки один раз на каждые 16 КБ, амортизируя стоимость повторной привязки буфера временного распределителя с другим смещением. Это сокращает количество вызовов API на 1, и теперь у нас есть оптимальное количество вызовов API: только сама отрисовка и возможное изменение группы привязки материалов. Вызов отрисовки имеет параметр базового экземпляра, который мы меняем, чтобы он указывал на другой слот в массиве данных унифицированного буфера.

Так почему бы вместо этого не использовать экземплярирование? Базовый экземпляр приводит к лучшей генерации кода шейдера на многих платформах. Причина в том, что идентификатор экземпляра является динамическим смещением. Графические процессоры упаковывают несколько экземпляров в одну и ту же вершинную волну, что означает, что все данные, индексированные по идентификатору экземпляра, должны использовать векторные регистры и векторные загрузки. Это сильно раздувает регистры для загрузки матриц 4x4 и т. п. С другой стороны, базовый экземпляр — это статическое смещение на отрисовку. Каждая полоса загружается из одного и того же места. Это означает, что компиляторы могут скаляризировать пути кода и/или использовать быстрое оборудование постоянного буфера. 

Однако на практике мы сталкиваемся с различными проблемами. В то время как базовый экземпляр кодогенерации идеален на ПК, на мобильных графических процессорах это смешанная картина. Некоторые драйверы просто не оптимизируют это должным образом. Кроме того, эта функция имеет плохое покрытие.
